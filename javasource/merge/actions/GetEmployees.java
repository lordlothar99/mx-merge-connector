// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package merge.actions;

import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import merge.proxies.GetEmployeesParam;
import merge.proxies.GetEmployeesResult;
import merge_hris_client.ApiClient;
import merge_hris_client.ApiException;
import merge_hris_client.Configuration;
import merge_hris_client.auth.*;
import merge_hris_client.model.*;
import merge_hris_client.api.EmployeesApi;
import org.threeten.bp.OffsetDateTime;
import com.mendix.core.Core;
import java.util.List;
import java.util.stream.Collectors;
import static merge.actions.MergeConverters.*;
import static merge.actions.MergeConverters.asOffsetDateTime;
import static merge.actions.StringUtils.*;

public class GetEmployees extends CustomJavaAction<IMendixObject>
{
	private java.lang.String apiKey;
	private IMendixObject __params;
	private merge.proxies.GetEmployeesParam params;

	public GetEmployees(IContext context, java.lang.String apiKey, IMendixObject params)
	{
		super(context);
		this.apiKey = apiKey;
		this.__params = params;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.params = __params == null ? null : merge.proxies.GetEmployeesParam.initialize(getContext(), __params);

		// BEGIN USER CODE
		if (logger.isTraceEnabled()) {
			StringUtils.ToStringBuilder builder = new ToStringBuilder();
			builder.append("apiKey", apiKey);
			builder.append("params", StringUtils.toString(params.getMendixObject(), getContext(), "    "));
			logger.trace(builder.toString());
		}
		PaginatedEmployeeList results = getEmployees(apiKey, params);
		if (logger.isTraceEnabled()) {
			logger.trace(results);
		}
		GetEmployeesResult mxResult = new GetEmployeesResult(getContext());
		mxResult.setNext(results.getNext());
		mxResult.setPrevious(results.getPrevious());
		List<merge.proxies.Employee> employees = results.getResults().stream()
				.map(e -> toMxEmployee(e))
				.collect(Collectors.toList());
		mxResult.setGetEmployeesResult_Employee(getContext(), employees);
		return mxResult.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetEmployees";
	}

	// BEGIN EXTRA CODE
	private static ILogNode logger = Core.getLogger("Merge.GetEmployees");

	private merge.proxies.Employee toMxEmployee(Employee employee) {
		merge.proxies.Employee mxEmployee = new merge.proxies.Employee(getContext());
		mxEmployee.set_Id(employee.getId().toString());
		mxEmployee.setFirstName(employee.getFirstName());
		mxEmployee.setLastName(employee.getLastName());
		mxEmployee.setDisplayFullName(employee.getDisplayFullName());
		return mxEmployee;
	}

	private static PaginatedEmployeeList getEmployees(String apiKey, GetEmployeesParam params) throws ApiException {
		ApiClient defaultClient = Configuration.getDefaultApiClient();
		defaultClient.setBasePath("https://api.merge.dev/api/hris/v1");

		// Configure API key authorization: tokenAuth
		ApiKeyAuth tokenAuth = (ApiKeyAuth) defaultClient.getAuthentication("tokenAuth");
		tokenAuth.setApiKey(apiKey);
		// Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
		tokenAuth.setApiKeyPrefix("Bearer");

		EmployeesApi apiInstance = new EmployeesApi(defaultClient);
		String xAccountToken = params.getAccountToken(); // String | Token identifying the end user.
		String companyId = null; // String | If provided, will only return employees for this company.
		OffsetDateTime createdAfter = asOffsetDateTime(params.getCreatedAfter()); // OffsetDateTime | If provided, will only return objects created after this datetime.
		OffsetDateTime createdBefore = asOffsetDateTime(params.getCreatedBefore()); // OffsetDateTime | If provided, will only return objects created before this datetime.
		String cursor = null; // String | The pagination cursor value.
		Boolean includeRemoteData = asBoolean(params.getIncludeRemoteData()); // Boolean | Whether to include the original data Merge fetched from the third-party to produce these models.
		Boolean includeSensitiveFields = null; // Boolean | Whether to include sensetive fields (such as social security numbers) in the response.
		String managerId = null; // String | If provided, will only return employees for this manager.
		OffsetDateTime modifiedAfter = asOffsetDateTime(params.getModifiedAfter()); // OffsetDateTime | If provided, will only return objects modified after this datetime.
		OffsetDateTime modifiedBefore = asOffsetDateTime(params.getModifiedBefore()); // OffsetDateTime | If provided, will only return objects modified before this datetime.
		Integer pageSize = params.getPageSize(); // Integer | Number of results to return per page.
		String remoteId = params.getRemoteId(); // String | The API provider's ID for the given object.
		String teamId = null; // String | If provided, will only return employees for this team.
		String workLocationId = null; // String | If provided, will only return employees for this location.

		PaginatedEmployeeList result = apiInstance.employeesList(xAccountToken, companyId, createdAfter, createdBefore, cursor, includeRemoteData, includeSensitiveFields, managerId, modifiedAfter, modifiedBefore, pageSize, remoteId, teamId, workLocationId);
		return result;
	}
	// END EXTRA CODE
}
