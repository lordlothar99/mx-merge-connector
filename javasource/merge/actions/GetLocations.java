// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package merge.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import merge_hris_client.ApiClient;
import merge_hris_client.ApiException;
import merge_hris_client.Configuration;
import merge_hris_client.auth.*;
import merge_hris_client.model.*;
import merge_hris_client.api.LocationsApi;
import org.threeten.bp.OffsetDateTime;

public class GetLocations extends CustomJavaAction<java.lang.String>
{
	private java.lang.String accountToken;
	private java.lang.String apiKey;

	public GetLocations(IContext context, java.lang.String accountToken, java.lang.String apiKey)
	{
		super(context);
		this.accountToken = accountToken;
		this.apiKey = apiKey;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		return getLocations(this.apiKey, this.accountToken);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetLocations";
	}

	// BEGIN EXTRA CODE
	private static String getLocations(String apiKey, String accountToken) {
		ApiClient defaultClient = Configuration.getDefaultApiClient();
		defaultClient.setBasePath("https://api.merge.dev/api/hris/v1");

		// Configure API key authorization: tokenAuth
		ApiKeyAuth tokenAuth = (ApiKeyAuth) defaultClient.getAuthentication("tokenAuth");
		tokenAuth.setApiKey(apiKey);
		// Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
		tokenAuth.setApiKeyPrefix("Bearer");

		LocationsApi apiInstance = new LocationsApi(defaultClient);
		String xAccountToken = accountToken; // String | Token identifying the end user.
		OffsetDateTime createdAfter = null; // OffsetDateTime | If provided, will only return objects created after this datetime.
		OffsetDateTime createdBefore = null; // OffsetDateTime | If provided, will only return objects created before this datetime.
		String cursor = null; // String | The pagination cursor value.
		Boolean includeRemoteData = true; // Boolean | Whether to include the original data Merge fetched from the third-party to produce these models.
		OffsetDateTime modifiedAfter = null; // OffsetDateTime | If provided, will only return objects modified after this datetime.
		OffsetDateTime modifiedBefore = null; // OffsetDateTime | If provided, will only return objects modified before this datetime.
		Integer pageSize = null; // Integer | Number of results to return per page.
		String remoteId = null; // String | The API provider's ID for the given object.
		try {
			PaginatedLocationList result = apiInstance.locationsList(xAccountToken, createdAfter, createdBefore, cursor, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId);
			System.out.println(result);
			return String.valueOf(result.getResults().size());
		} catch (ApiException e) {
			System.err.println("Exception when calling LocationsApi#locationsList");
			System.err.println("Status code: " + e.getCode());
			System.err.println("Reason: " + e.getResponseBody());
			System.err.println("Response headers: " + e.getResponseHeaders());
			e.printStackTrace();
			return "error : " + e.getCode() + "/" + e.getResponseBody() + "/" + e.getResponseHeaders();
		}
	}
	// END EXTRA CODE
}
