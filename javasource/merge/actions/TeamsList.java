// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package merge.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import merge.actions.util.StringUtils;
import merge.proxies.Team;
import merge.proxies.TeamsListParams;
import merge_hris_client.ApiClient;
import merge_hris_client.ApiException;
import merge_hris_client.Configuration;
import merge_hris_client.api.TeamsApi;
import merge_hris_client.auth.ApiKeyAuth;
import merge_hris_client.model.PaginatedTeamList;
import org.threeten.bp.OffsetDateTime;
import java.util.List;
import java.util.stream.Collectors;
import static merge.actions.util.MergeConverters.asBoolean;
import static merge.actions.util.MergeConverters.asOffsetDateTime;

public class TeamsList extends CustomJavaAction<IMendixObject>
{
	private java.lang.String apiKey;
	private IMendixObject __params;
	private merge.proxies.TeamsListParams params;

	public TeamsList(IContext context, java.lang.String apiKey, IMendixObject params)
	{
		super(context);
		this.apiKey = apiKey;
		this.__params = params;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		this.params = __params == null ? null : merge.proxies.TeamsListParams.initialize(getContext(), __params);

		// BEGIN USER CODE
		if (logger.isTraceEnabled()) {
			StringUtils.ToStringBuilder builder = new StringUtils.ToStringBuilder();
			builder.append("apiKey", apiKey);
			builder.append("params", StringUtils.toString(params.getMendixObject(), getContext(), "    "));
			logger.trace(builder.toString());
		}
		PaginatedTeamList results = getTeams(this.apiKey, this.params);
		if (logger.isTraceEnabled()) {
			logger.trace(results);
		}
		merge.proxies.PaginatedTeamList mxResult = new merge.proxies.PaginatedTeamList(getContext());
		mxResult.setNext(results.getNext());
		mxResult.setPrevious(results.getPrevious());
		List<Team> teams = results.getResults().stream()
				.map(l -> toMxTeam(l))
				.collect(Collectors.toList());
		mxResult.setPaginatedTeamList_Team(teams);
		return mxResult.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "TeamsList";
	}

	// BEGIN EXTRA CODE
	private static ILogNode logger = Core.getLogger("Merge.TeamsList");

	private merge.proxies.Team toMxTeam(merge_hris_client.model.Team team) {
		merge.proxies.Team mxLocation = new merge.proxies.Team(getContext());
		mxLocation.set_Id(team.getId().toString());
		mxLocation.setRemoteId(team.getRemoteId());
		mxLocation.setName(team.getName());
		return mxLocation;
	}

	private static PaginatedTeamList getTeams(String apiKey, TeamsListParams params) throws ApiException {
		ApiClient defaultClient = Configuration.getDefaultApiClient();
		defaultClient.setBasePath("https://api.merge.dev/api/hris/v1");

		// Configure API key authorization: tokenAuth
		ApiKeyAuth tokenAuth = (ApiKeyAuth) defaultClient.getAuthentication("tokenAuth");
		tokenAuth.setApiKey(apiKey);
		// Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
		tokenAuth.setApiKeyPrefix("Bearer");

		TeamsApi apiInstance = new TeamsApi(defaultClient);
		String xAccountToken = params.getAccountToken(); // String | Token identifying the end user.
		OffsetDateTime createdAfter = asOffsetDateTime(params.getCreatedAfter()); // OffsetDateTime | If provided, will only return objects created after this datetime.
		OffsetDateTime createdBefore = asOffsetDateTime(params.getCreatedBefore()); // OffsetDateTime | If provided, will only return objects created before this datetime.
		String cursor = params.getCursor(); // String | The pagination cursor value.
		Boolean includeRemoteData = asBoolean(params.getIncludeRemoteData()); // Boolean | Whether to include the original data Merge fetched from the third-party to produce these models.
		OffsetDateTime modifiedAfter = asOffsetDateTime(params.getModifiedAfter()); // OffsetDateTime | If provided, will only return objects modified after this datetime.
		OffsetDateTime modifiedBefore = asOffsetDateTime(params.getModifiedBefore()); // OffsetDateTime | If provided, will only return objects modified before this datetime.
		Integer pageSize = params.getPageSize(); // Integer | Number of results to return per page.
		String remoteId = params.getRemoteId(); // String | The API provider's ID for the given object.

		PaginatedTeamList result = apiInstance.teamsList(xAccountToken, createdAfter, createdBefore, cursor, includeRemoteData, modifiedAfter, modifiedBefore, pageSize, remoteId);
		return result;
	}
	// END EXTRA CODE
}
